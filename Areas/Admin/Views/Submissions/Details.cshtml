@model WorkbookManagement.Models.Submission
@using WorkbookManagement.Models

@{
    ViewData["Title"] = "Submission Details";
}

@functions {
    // Map bundle statuses to Bootstrap badge classes (no switch-expr to keep Razor happy)
    public string BadgeForBundle(SubmissionBundleStatus s)
    {
        if (s == SubmissionBundleStatus.Submitted) return "info";
        if (s == SubmissionBundleStatus.Approved) return "success";
        if (s == SubmissionBundleStatus.Rejected) return "danger";
        if (s == SubmissionBundleStatus.Completed) return "success";
        if (s == SubmissionBundleStatus.InProgress) return "warning text-dark";
        return "secondary";
    }

    // Map workbook statuses to Bootstrap badge classes
    public string BadgeForWorkbook(SubmissionStatus s)
    {
        if (s == SubmissionStatus.Completed) return "success";
        if (s == SubmissionStatus.Approved) return "success";
        if (s == SubmissionStatus.Submitted) return "info";
        return "secondary";
    }

    public string ShortId(System.Guid id)
    {
        var s = id.ToString("N");
        return s.Substring(0, 8);
    }
}

<h2 class="mb-3">Submission <code>@ShortId(Model.Id)</code></h2>

@if (TempData["ok"] is string ok && !string.IsNullOrWhiteSpace(ok))
{
    <div class="alert alert-success">@ok</div>
}
@if (TempData["err"] is string err && !string.IsNullOrWhiteSpace(err))
{
    <div class="alert alert-danger">@err</div>
}

<div class="row g-3 mb-3">
    <div class="col-md-4">
        <div class="border rounded p-3 h-100">
            <div><strong>Company:</strong><br />@Model.Company?.Name</div>
            <div class="mt-2"><strong>Owner:</strong><br />@Model.OwnerUser?.Email</div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="border rounded p-3 h-100">
            <div>
                <strong>Status:</strong>
                <span class="badge bg-@BadgeForBundle(Model.Status) ms-1">@Model.Status</span>
            </div>
            <div class="mt-2"><strong>Created:</strong> @Model.CreatedAt.ToLocalTime()</div>
            <div><strong>Updated:</strong> @Model.UpdatedAt?.ToLocalTime()</div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="border rounded p-3 h-100">
            <div class="fw-semibold mb-1">Decision</div>
            @if (Model.IsTerminal)
            {
                <div>
                    <strong>Outcome:</strong>
                    <span class="badge bg-@BadgeForBundle(Model.Status) ms-1">@Model.Status</span>
                </div>
                <div><strong>By:</strong> @Model.DecidedByUser?.Email</div>
                <div><strong>At:</strong> @Model.DecidedAtUtc?.ToLocalTime()</div>
                @if (!string.IsNullOrWhiteSpace(Model.DecisionNote))
                {
                    <div class="mt-1">
                        <strong>Note:</strong><br />
                        <span class="text-muted">@Model.DecisionNote</span>
                    </div>
                }
            }
            else
            {
                <div class="text-muted">Not decided yet.</div>
            }
        </div>
    </div>
</div>

<h5 class="mt-3">Workbooks</h5>
<div class="table-responsive">
    <table class="table table-sm align-middle">
        <thead>
            <tr>
                <th>Title</th>
                <th>Type</th>
                <th>Status</th>
                <th>Updated</th>
                <th style="width:200px">Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var w in Model.Workbooks.OrderBy(w => w.WorkbookType))
            {
                <tr>
                    <td>@w.Title</td>
                    <td>@w.WorkbookType</td>
                    <td>
                        <span class="badge bg-@BadgeForWorkbook(w.Status)">@w.Status</span>
                    </td>
                    <td>@w.UpdatedAt.ToLocalTime()</td>
                    <td>
                        <a class="btn btn-outline-secondary btn-sm"
                           href="@Url.Action("Show", "Workbooks", new { id = w.Id })">
                            View
                        </a>
                        <a class="btn btn-primary btn-sm"
                           href="@Url.Action("Open", "Workbooks", new { id = w.Id })">
                            Open
                        </a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<hr class="my-4" />

@if (Model.Status == SubmissionBundleStatus.Submitted && !Model.IsTerminal)
{
    <div class="card">
        <div class="card-body">
            <h6 class="card-title mb-3">Decision</h6>
            <form method="post"
                  asp-area="Admin"
                  asp-controller="Submissions"
                  asp-action="Decide"
                  asp-route-id="@Model.Id">
                @Html.AntiForgeryToken()

                <div class="mb-3">
                    <label class="form-label">Reason / note (optional)</label>
                    <textarea name="reason" class="form-control" rows="3" placeholder="Add an explanatory note (optional)">@Model.DecisionNote</textarea>
                </div>

                <div class="d-flex gap-2">
                    <button class="btn btn-success" name="decision" value="approve"
                            onclick="return confirm('Approve this submission?');">
                        Approve
                    </button>
                    <button class="btn btn-danger" name="decision" value="reject"
                            onclick="return confirm('Reject this submission?');">
                        Reject
                    </button>
                </div>
            </form>
        </div>
    </div>
}
else if (Model.IsTerminal)
{
    <div class="alert alert-secondary">
        This submission was <strong>@Model.Status</strong>
        @if (Model.DecidedAtUtc.HasValue)
        {
            @:on @Model.DecidedAtUtc.Value.ToLocalTime()
        }
        @if (!string.IsNullOrWhiteSpace(Model.DecidedByUser?.Email))
        {
            @: by @Model.DecidedByUser!.Email
        }
        .
    </div>
}
else
{
    <div class="alert alert-info">
        Decisions are available once the bundle has been <strong>Submitted</strong> by the company.
    </div>
}
