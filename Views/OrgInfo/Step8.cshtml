@model WorkbookManagement.Models.OrgInfoPricingSection
@{
    ViewData["Title"] = "Org Info — Page 8 of 8";
    var id = (int)ViewBag.Id;

    // Duration units (no blank entry; we show a hidden "Select" placeholder in the <select>)
    var durUnits = new List<Microsoft.AspNetCore.Mvc.Rendering.SelectListItem> {
        new("Hours","Hours"),
        new("Days","Days"),
        new("Months","Months"),
        new("Years","Years"),
    };
}

@await Html.PartialAsync("_OrgInfoNav")

<style>
    .box {
        border: 1px solid #bfbfbf;
        border-radius: 10px;
        padding: 16px;
        margin-bottom: 16px;
        background: #fff;
    }

        .box h6 {
            margin: 0 0 12px;
            font-weight: 700;
            text-transform: uppercase;
        }

    .tight-table th, .tight-table td {
        padding: .45rem .6rem;
        vertical-align: middle;
    }

        /* Very faint vertical separators between columns */
        .tight-table th + th,
        .tight-table td + td {
            border-left: 1px solid rgba(0,0,0,.06);
        }

        .tight-table th:first-child,
        .tight-table td:first-child {
            border-left: none;
        }

    .nowrap {
        white-space: nowrap;
    }

    .table-wide {
        min-width: 2200px;
    }

    /* lots of number columns */
    .cell-xl {
        min-width: 360px;
    }
    /* Qualification Name */
    .cell-l {
        min-width: 220px;
    }

    .cell {
        min-width: 180px;
    }

    .cell-s {
        min-width: 140px;
    }

    .cell-xs {
        min-width: 110px;
    }

    .tight-table td {
        white-space: normal;
        word-break: break-word;
    }

    /* Make small input-groups hug the input + fill the cell */
    .input-group.input-group-sm {
        width: 100%;
    }

        .input-group.input-group-sm .input-group-text {
            padding: .25rem .4rem;
        }
</style>

<div class="container mt-3">
    <h3>PART 6: - QUALIFICATIONS / PROGRAMMES / COURSES (PRICING)</h3>

    <form method="post" asp-action="Step8" asp-route-id="@id">
        <div class="box">
            <div class="d-flex justify-content-between align-items-center mb-2">
                <h6 class="mb-0">Pricing</h6>
                <div class="text-muted small">
                    Read-only identity columns are synced from Part 5.
                </div>
            </div>

            <div class="table-responsive">
                <table class="table table-sm tight-table table-wide" id="pricingTable">
                    <thead>
                        <tr>
                            <th class="nowrap">CODE</th>
                            <th class="nowrap">QUALIFICATION / PROGRAMME / COURSE</th>
                            <th class="nowrap">TYPE</th>
                            <th class="nowrap">NQF LEVEL</th>
                            <th class="nowrap">CREDITS</th>

                            <th class="nowrap">DURATION UNIT</th>
                            <th class="nowrap">DURATION</th>
                            <th class="nowrap">NOTIONAL HOURS</th>

                            <th class="nowrap">REGISTRATION</th>
                            <th class="nowrap">ADMIN</th>
                            <th class="nowrap">FACILITATION</th>
                            <th class="nowrap">TRAIN MATERIALS</th>
                            <th class="nowrap">PPE/TOOLS/EQUIP</th>
                            <th class="nowrap">OVERHEADS</th>
                            <th class="nowrap">ASSESSMENT</th>
                            <th class="nowrap">RE-ASSESS</th>
                            <th class="nowrap">MODERATION</th>
                            <th class="nowrap">OTHER</th>
                            <th class="nowrap">CERTIFICATION</th>

                            <th class="nowrap">TOTAL</th>
                            <th class="nowrap">AVE / N HOUR</th>
                        </tr>
                    </thead>
                    <tbody>
                        @for (int i = 0; i < (Model.Items?.Count ?? 0); i++)
                        {
                            var it = Model.Items[i];
                            var blankRow = it == null
                            || (string.IsNullOrWhiteSpace(it.Code)
                            && string.IsNullOrWhiteSpace(it.QualificationName)
                            && string.IsNullOrWhiteSpace(it.Type)
                            && string.IsNullOrWhiteSpace(it.NQFLevel));
                            if (blankRow)
                            {
                                continue; // skip rendering completely blank rows
                            }
                            <tr class="pricing-row">
                                <!-- READ-ONLY identity fields -->
                                <td><input asp-for="Items[@i].Code" class="form-control form-control-sm cell-xs" readonly /></td>
                                <td><input asp-for="Items[@i].QualificationName" class="form-control form-control-sm cell-xl" readonly /></td>
                                <td><input asp-for="Items[@i].Type" class="form-control form-control-sm cell-s" readonly /></td>
                                <td><input asp-for="Items[@i].NQFLevel" class="form-control form-control-sm cell-xs" readonly /></td>
                                <td><input asp-for="Items[@i].Credits" type="number" class="form-control form-control-sm cell-xs credits" readonly /></td>

                                <!-- Editable -->
                                <td>
                                    <select asp-for="Items[@i].DurationUnit" asp-items="durUnits" class="form-select form-select-sm cell-s">
                                        <option value="" selected hidden>Select</option>
                                    </select>
                                </td>
                                <td><input asp-for="Items[@i].Duration" type="number" step="0.01" class="form-control form-control-sm cell-xs" /></td>

                                <!-- NOTIONAL HOURS: auto = CREDITS * 10 (read-only) -->
                                <td><input asp-for="Items[@i].NotionalHours" type="number" class="form-control form-control-sm cell-xs nh" readonly /></td>

                                <!-- Rand-prefixed cost fields -->
                                <td class="cell-s">
                                    <div class="input-group input-group-sm">
                                        <span class="input-group-text">R</span>
                                        <input asp-for="Items[@i].Registration" type="number" step="0.01" class="form-control form-control-sm cost" />
                                    </div>
                                </td>
                                <td class="cell-s">
                                    <div class="input-group input-group-sm">
                                        <span class="input-group-text">R</span>
                                        <input asp-for="Items[@i].Admin" type="number" step="0.01" class="form-control form-control-sm cost" />
                                    </div>
                                </td>
                                <td class="cell-s">
                                    <div class="input-group input-group-sm">
                                        <span class="input-group-text">R</span>
                                        <input asp-for="Items[@i].Facilitation" type="number" step="0.01" class="form-control form-control-sm cost" />
                                    </div>
                                </td>
                                <td class="cell-s">
                                    <div class="input-group input-group-sm">
                                        <span class="input-group-text">R</span>
                                        <input asp-for="Items[@i].TrainMaterials" type="number" step="0.01" class="form-control form-control-sm cost" />
                                    </div>
                                </td>
                                <td class="cell-s">
                                    <div class="input-group input-group-sm">
                                        <span class="input-group-text">R</span>
                                        <input asp-for="Items[@i].PpeToolsEquipment" type="number" step="0.01" class="form-control form-control-sm cost" />
                                    </div>
                                </td>
                                <td class="cell-s">
                                    <div class="input-group input-group-sm">
                                        <span class="input-group-text">R</span>
                                        <input asp-for="Items[@i].Overheads" type="number" step="0.01" class="form-control form-control-sm cost" />
                                    </div>
                                </td>
                                <td class="cell-s">
                                    <div class="input-group input-group-sm">
                                        <span class="input-group-text">R</span>
                                        <input asp-for="Items[@i].Assessment" type="number" step="0.01" class="form-control form-control-sm cost" />
                                    </div>
                                </td>
                                <td class="cell-s">
                                    <div class="input-group input-group-sm">
                                        <span class="input-group-text">R</span>
                                        <input asp-for="Items[@i].ReAssess" type="number" step="0.01" class="form-control form-control-sm cost" />
                                    </div>
                                </td>
                                <td class="cell-s">
                                    <div class="input-group input-group-sm">
                                        <span class="input-group-text">R</span>
                                        <input asp-for="Items[@i].Moderation" type="number" step="0.01" class="form-control form-control-sm cost" />
                                    </div>
                                </td>
                                <td class="cell-s">
                                    <div class="input-group input-group-sm">
                                        <span class="input-group-text">R</span>
                                        <input asp-for="Items[@i].Other" type="number" step="0.01" class="form-control form-control-sm cost" />
                                    </div>
                                </td>
                                <td class="cell-s">
                                    <div class="input-group input-group-sm">
                                        <span class="input-group-text">R</span>
                                        <input asp-for="Items[@i].Certification" type="number" step="0.01" class="form-control form-control-sm cost" />
                                    </div>
                                </td>

                                <td><input asp-for="Items[@i].Total" type="number" step="0.01" class="form-control form-control-sm cell-s total" readonly /></td>
                                <td><input asp-for="Items[@i].AvePerNotionalHour" type="number" step="0.01" class="form-control form-control-sm cell-s ave" readonly /></td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

        <div class="d-flex gap-2 justify-content-end mb-5">
            <button class="btn btn-secondary" name="nav" value="prev" type="submit">Previous</button>
            <button class="btn btn-primary" name="nav" value="save" type="submit">Save Draft</button>
            <button class="btn btn-success" name="nav" value="next" type="submit">Next</button>
        </div>
    </form>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        (function () {
            var table = document.getElementById('pricingTable');
            if (!table) return;

            var body = table.tBodies[0];
            if (!body) return;

            function num(v) {
                var x = parseFloat(v);
                return isNaN(x) ? 0 : x;
            }

            function recalcRow(tr) {
                // credits -> notional hours (read-only)
                var credEl = tr.querySelector('.credits');
                var nhEl = tr.querySelector('.nh');
                var credits = num(credEl ? credEl.value : '');
                var nh = credits > 0 ? (credits * 10) : 0;
                if (nhEl) nhEl.value = nh ? nh.toFixed(0) : '';

                // sum all cost cells -> total
                var total = 0;
                var costs = tr.querySelectorAll('.cost');
                for (var i = 0; i < costs.length; i++) total += num(costs[i].value);

                var totalEl = tr.querySelector('.total');
                var aveEl = tr.querySelector('.ave');

                if (totalEl) totalEl.value = total ? total.toFixed(2) : '';
                if (aveEl) aveEl.value = (nh > 0 && total) ? (total / nh).toFixed(2) : '';
            }

            // recalc when any cost/duration/etc changes
            body.addEventListener('input', function (e) {
                var tr = e.target.closest('tr.pricing-row');
                if (tr) recalcRow(tr);
            });

            // initial calc
            var rows = body.querySelectorAll('tr.pricing-row');
            for (var i = 0; i < rows.length; i++) recalcRow(rows[i]);

            // make sure NH/averages are correct right before submit
            var form = table.closest('form');
            if (form) {
                form.addEventListener('submit', function () {
                    var rows = body.querySelectorAll('tr.pricing-row');
                    for (var i = 0; i < rows.length; i++) recalcRow(rows[i]);
                });
            }
        })();
    </script>
}
